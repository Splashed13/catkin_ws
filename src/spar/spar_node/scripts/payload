#!/usr/bin/env python3

# Import ROS stuff
import rospy
from std_msgs.msg import Bool
# Import Python/Pi stuff
from gpiozero import AngularServo
from gpiozero import Servo
import time

# Set all necessary permissions -----------
import subprocess

def set_permissions(password):
    try:
        # Prepare the password as input for the sudo command
        password_input = password + "\n"

        # Set permissions for /dev/mem
        process_mem = subprocess.run(
            ['sudo', '-S', 'chmod', '777', '/dev/mem'], 
            input=password_input, 
            text=True, 
            check=True
        )
        print("Permissions for /dev/mem set successfully.")
        
        # Set permissions for /dev/gpiomem
        process_gpiomem = subprocess.run(
            ['sudo', '-S', 'chmod', '777', '/dev/gpiomem'], 
            input=password_input, 
            text=True, 
            check=True
        )
        print("Permissions for /dev/gpiomem set successfully.")
    
    except subprocess.CalledProcessError as e:
        print(f"An error occurred: {e}")

sudo_password = "gcsteam5"
set_permissions(sudo_password)
# ---------------------------------------

sub_a = None
sub_b = None

# DEFINE YOUR SERVO PINS
servo1_pin = 17
servo2_pin = 18

# gpiozero Servo expects the position to be between -1 (min) and 1 (max)
# servo1 = GPIO.Servo(servo1_pin)
servo1 = AngularServo(servo1_pin, min_angle=0, max_angle=180, min_pulse_width=0.5/1000, max_pulse_width=2.27/1000)
# servo2 = GPIO.Servo(servo2_pin)
servo2 = AngularServo(servo2_pin, min_angle=0, max_angle=180, min_pulse_width=0.5/1000, max_pulse_width=2.27/1000)

# start both paylaods off completely closed and off to reduce jitter
servo1.min()
servo2.min()
time.sleep(1.5)
servo1.angle = None
servo2.angle = None

# Function to open and close payload container 1
def Deploy_Payload_1():
    print("Deploying Payload 1")
    # Open servo 1 (position 1 = fully open)
    servo1.max()
    # Wait for deployment to happen
    time.sleep(2)
    # Close payload 1 (position -1 = fully closed)
    servo1.min()
    # Turn off servo 1 (neutral position)
    time.sleep(1)
    servo1.angle = None
    print("Payload 1 Deployed")

# Function to open and close payload container 2
def Deploy_Payload_2():
    print("Deploying Payload 2")
    # Open servo 2 (position 1 = fully open)
    servo2.max()
    # Wait for deployment to happen
    time.sleep(2)
    # Close payload 2 (position -1 = fully closed)
    servo2.min()
    # Turn off servo 2 (neutral position)
    time.sleep(1)
    servo2.angle = None
    print("payload 2 Deployed")

# Deploy servo from ROS
def callback_a(msg_in):
    # Get the data out of the command
    servo = msg_in.data
    
    # Filter out bad values
    if servo != True:
        print("Incorrect Value, Enter True or False")
        return
    else:
        print("Payload 1 Message Recieved: ", servo)

    # Deploy the respective servo
    Deploy_Payload_1()

# Deploy servo from ROS
def callback_b(msg_in):
    # Get the data out of the command
    servo = msg_in.data
    
    # Filter out bad values
    if servo != True:
        print("Incorrect Value, Enter True or False")
        return
    else:
        print("Payload 2 Message Recieved: ", servo)

    # Deploy the respective servo
    Deploy_Payload_2()

	
def shutdown():
    # Clean up our ROS subscriber if they were set, avoids error messages in logs
    if sub_a is not None:
        sub_a.unregister()
    if sub_b is not None:
        sub_b.unregister()

    # XXX: Could perform some failsafe actions here!

    # Set servos to None to stop sending PWM signals
    servo1.angle = None
    servo2.angle = None

    # Close the pigpio pin factory to clean up resources
    # pin_factory.close()

    print("Resources are cleaned up")


# ===================================================================================================
# This is the main code
if __name__ == '__main__':
	# Setup the ROS backend for this node
	rospy.init_node('actuator_controller', anonymous=True)

	# Setup the publisher for a actuator 1 
	sub_a = rospy.Subscriber('/actuator_control/actuator_a', Bool, callback_a)
    # Setup the publisher for a actuator 2 
	sub_b = rospy.Subscriber('/actuator_control/actuator_b', Bool, callback_b)
    #
	# Make sure we clean up all our code before exiting
	rospy.on_shutdown(shutdown)

	# Loop forever
	rospy.spin()

# ===================================================================================================