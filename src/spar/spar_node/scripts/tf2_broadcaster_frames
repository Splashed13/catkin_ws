#!/usr/bin/env python3

import math
import rospy
import tf2_ros
import tf_conversions
from geometry_msgs.msg import PoseStamped, TransformStamped

# Global Variables
tfbr = None
tfsbr = None

camera_name = "camera"

def send_tf_camera():
    # Fetch the UAV name parameter after the node is initialized
    uav_name = rospy.get_param('~uav_name', 'emulated_uav') 
    # Create a static transform that is slightly
    # below the UAV and pointing downwards
    t = TransformStamped()
    t.header.stamp = rospy.Time.now()
    rospy.loginfo(f'uav_name: {uav_name}')
    rospy.loginfo(f'camera_name: {camera_name}')
    t.header.frame_id = uav_name
    t.child_frame_id = camera_name

    t.transform.translation.x = 0.1
    t.transform.translation.y = 0.0
    t.transform.translation.z = -0.13
    q = tf_conversions.transformations.quaternion_from_euler(0, math.pi, 0)
    t.transform.rotation.x = q[0]
    t.transform.rotation.y = q[1]
    t.transform.rotation.z = q[2]
    t.transform.rotation.w = q[3]

    # Send the static transformation
    tfsbr.sendTransform(t)

if __name__ == '__main__':
    rospy.init_node('tf2_broadcaster_frames')

    # Setup tf2 broadcasters
    tfsbr = tf2_ros.StaticTransformBroadcaster()

    # Send the camera transform
    send_tf_camera()

    rospy.loginfo("tf2_broadcaster_frames running.")

    try:
        rospy.spin()
    except rospy.exceptions.ROSInterruptException:
        pass
    finally:
        rospy.loginfo("tf2_broadcaster_frames shutting down")
