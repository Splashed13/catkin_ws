#!/usr/bin/env python3

import rospy
from nav_msgs.msg import OccupancyGrid
from typing import List, Tuple, Union, cast
import sys
import cv2
import numpy as np

class Dilate():
    def __init__(self) -> None:
        self._dilation_size = 3
        self._threshold = 50

        self._morph_element = cv2.getStructuringElement(
            cv2.MORPH_CROSS,
            (2*self._dilation_size + 1, 2*self._dilation_size + 1),
            (self._dilation_size, self._dilation_size)
        )


        self._sub_grid = rospy.Subscriber("~sensed", OccupancyGrid, self._cb_grid)
        self._pub_grid = rospy.Publisher('grid', OccupancyGrid, queue_size=1, latch=True)
        rospy.loginfo("Started grid dilator")


    def _cb_grid(self, msg:OccupancyGrid):
        if msg.header.stamp <= rospy.Time(0):
            return

        data = np.array(msg.data, dtype=np.int8).astype(np.int16)
        grid = cv2.Mat(data).reshape(msg.info.height, msg.info.width)

        _, obstacles = cv2.threshold(grid, self._threshold, 100, cv2.THRESH_BINARY)
        # _, unknowns = cv2.threshold(grid, -1, 1, cv2.THRESH_BINARY_INV)

        dilatation_dst = cv2.dilate(obstacles, self._morph_element)
        dilatation_dst[grid < 0] = -1

        # cv2.imshow('grid', grid*1000)
        # cv2.imshow('obstacles', obstacles.astype(np.int8))
        # cv2.imshow('unknowns', grid[grid < 0].astype(np.int8)*100)
        # cv2.imshow('dilatation_dst', dilatation_dst.astype(np.int8)*1000)

        msg_d = msg
        msg_d.data = dilatation_dst.astype(np.int8).ravel()

        # Send resulting grid
        self._pub_grid.publish(msg_d)


def main(args:List[str]):
    rospy.init_node('dilate')

    d = Dilate()
    rospy.spin()

    return


if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except rospy.ROSInterruptException:
        pass

    # cv2.destroyAllWindows()